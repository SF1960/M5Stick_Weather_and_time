#include "arduino_secrets.h"
/*****************************************************************************************************
  Sketch generated by the Arduino IoT Cloud Thing "M5StickCplus"
  https://create.arduino.cc/cloud/things/948c457b-aba5-4a8b-b933-234c600f5661 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float chargeBAT;
  float dischargeBAT;
  float sensorHUM;
  float sensorPRES;
  float sensorTEMP;
  float tempBAT;
  float voltageBAT;
  float voltageUSB;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
******************************************************************************************************/

/*****************************************************************************************************
* Description:  M5 Stick code for weather, battery, time display and Arduino IOT Integration
*               the program obtains the time from the internet ntp servers https://europe.pool.ntp.org
*               and the weather data from OpenWeather API https://openweathermap.org/guide
*               It uses a connected ENVIII sensor for temperature, humidity and pressure
* Sketch:       M5StickCplus_sep18a.ino
* Version:      1.0
* Version Desc: 1.0 Original First Code
*               2.0 Update to allow 3 network connections with automatic switching
* Board:        M5StickCPlus
* Author:       Steve Fuller
* Website:      
* Comments      Original battery code from Volos Projects https://www.youtube.com/@VolosProjects
*               Fonts are from https://oleddisplay.squix.ch/#/home
******************************************************************************************************/

// Arduino IOT library
#include "thingProperties.h"                                 // Arduino Library auto created DO NOT EDIT

// Arduino libraries
#include <Arduino.h>                                         // Arduino C++ library (only needed for Visual Code IDE)
#include <M5StickCPlus.h>                                    // Library for the M5StickCPlus module
#include <M5_ENV.h>                                          // Library for the M5 ENVIII temp, hum and pressure HAT
#include <WiFi.h>                                            // Library to connect to WiFi
#include <time.h>                                            // Library for time and RTC
#include <Adafruit_SHT31.h>                                  // Library for the ENVIII temp and hum sensor
#include <Wire.h>                                            // Library to connect the ENVIII

// local libraries
#include "globals.h"                                         // global variables, constants and declarations
#include "fonts.h"                                           // font file for the Lcd
#include "pbHelper.h"                                        // M5 push button local library
#include "monitorHelper.h"                                   // Serial monitor local library
#include "M5Helper.h"                                        // M5tick local library
#include "WiFiHelper.h"                                      // WiFi local library
#include "envHelper.h"                                       // ENVIII module local library
#include "weatherHelper.h"                                   // OpenWeather local library

TFT_eSprite spr = TFT_eSprite(&M5.Lcd);                      // set the screen object

RTC_TimeTypeDef TimeStruct;                                  // set the real time clock on=bject

// the setup routine
void setup() {
  // Initialize serial and wait for port to open:
  serial::setup(115200);                                      // set up the serial monitor
  stick::setup();                                             // set up the M5 Stick
  /* This switch statement goes through each case statement
  *  and attempts to connect to the given WiFi credentials stored in Flash memory.
  *  If unsuccessful it prints an error then falls down to the next case statement.
  *  If successful it displays a success message and breaks out of the switch statement*/
  switch (1){                                                 // always start at the 1st case statement
    case 1:
      if (CONNECT_TO_PIXEL){                                  // function that attempts to connect to the 1st WiFi network. Returns True or False.
        wifi::connected(ssid);                                // if successful, display the SSID 
        break;                                                // if successful, break out of the switch statement
      } else {                                                // if NOT successful, continue here
        wifi::connectError(ssid);                             // display an error message with the SSID
      }                                                       // fall through to the next case statement

    case 2:                                                   // attempt connection 2
      if (CONNECT_TO_VIRGIN){
        wifi::connected(ssid2);
        break;
      } else {
        wifi::connectError(ssid2);
      }

    case 3:                                                   // attempt connection 3
      if(CONNECT_TO_HOME){
        wifi::connected(ssid3);
        break;
      } else {
        wifi::connectError(ssid3);
      }
    default:
      CONNECTION_FAILED;                                     // if code reaches this statement then all connection attempts have failed
      delay(RESET_DELAY);                                    // wait 10s and restart connection attempts
      ESP.restart();  
  }
  //wifi::connect();                                         // connect to the WiFi
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  buttons::setup();                                           // set up the push buttons
  spr.createSprite(135,240);                                  // create the object
  wifi::ntp();                                                // get the internet time
  ow::getData();                                              // get weather data from OpenWeather
  stick::LcdDefault();                                        // set the Lcd default
  printLocalTime();                                           // print the statistics and save the variables
  //wifi::disconnect();                                       // disconnet the WiFi
  sensor::setup();                                            // set up the ENVIII sensor

  M5.Axp.ScreenBreath(brightness[chosenBrightness]);          // set the screen brightness

  Serial.printf("Set up completed %s\n", ".");
  
} // setup()

// print local time and update date/time variables
void printLocalTime() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }

  char timeHour[3];  strftime(timeHour, 3,  "%H", &timeinfo);     // Set the hour
  char timeMins[3];  strftime(timeMins, 3,  "%M", &timeinfo);     // set the minute
  char timeSecs[3];  strftime(timeSecs, 3,  "%S", &timeinfo);     // set the seconds
  char dateDate[3];  strftime(dateDate, 3,  "%d", &timeinfo);     // set the date
  char dateDay[10];  strftime(dateDay, 10,  "%A", &timeinfo);     // set the day
  char dateMonth[8]; strftime(dateMonth, 8, "%B", &timeinfo);     // set the month
  char dateYear[5];  strftime(dateYear, 5,  "%Y", &timeinfo);     // set the year

  // copy the internet date strings in to local variables
  strHrs = timeHour;
  strMins = timeMins;
  strSecs = timeSecs;
  strDate = dateDate;
  strDay = dateDay;
  strMonth = dateMonth;
  strYear = dateYear;

  // copy the M5 data to local variables
  voltageBAT = M5VBat;
  dischargeBAT = batchargeCurrent;
  chargeBAT = intCharge;
  tempBAT = M5BatTemp;

} // printLocalTime()

// draw battery data screen
void drawBatteryScreen() {

  drawBars();                                                    // draw brightness bars

  drawHeader("BATTERY", "B+", "SET DISPLAY      ");              // draw first line of display

  drawValueLargeDisplay(M5VBat, 30, "V", 120);                   // draw large display

  drawTime();                                                    // draw time at botton of display
  
  drawMenuItems();                                               // draw the menu items 
  
  drawLines();                                                   // draw orange separator lines

  drawBatteryInfo();                                             // draw left hand data
  
  drawMeters("USB V", USBVin, "BAT mA", intCharge);              // draw meters section

  spr.pushSprite(0,0); 

} // drawBatteryScreen()

// draw OpenWeather data
void drawWeatherScreen() {

  drawBars();                                                    // draw brightness bars

  drawHeader("WEATHER", "B+", "SET DISPLAY      ");              // draw top line of display

  drawTextLargeDisplay(owCurrentWeather, 10);                    // draw large display
        
  drawTime();                                                    // draw time at botton of display

  drawMenuItems();                                               // draw the menu items
  
  drawLines();                                                   // draw orange separator lines

  drawBatteryInfo();                                             // draw battery data on left hand side
  
  drawWeatherMeters("Temp C", owTemp, "HUM %", owHum);           // draw 2 meters in centre of display

} // drawWeatherScreen()

// draw sensor data
void drawTemperatureScreen() {

  drawBars();                                                   // draw brightness bars

  drawHeader("TEMP/HUM", "B+", "SET DISPLAY      ");            // draw display

  drawValueLargeDisplay(sensTemp, 10, "C", 120);                // draw temperature

  drawTime();                                                   // draw time at botton of display

  drawMenuItems();                                              // draw the menu items
  
  drawLines();                                                  // draw orange separator lines

  drawBatteryInfo();                                            // draw battery data on left hand side
  
  drawMeters("HUM %", sensHum, "hPa", sensPress/100);           // meter section in middle of display to show USB voltage and battery current

} //drawTemperatureScreen()

void drawTimeScreen() {

  drawBars();                                                   // draw brightness bars

  drawHeader("TIME/DATE","B+","SET DISPLAY      ");             // draw top display

  // draw large time output 
  spr.setTextColor(WHITE,BLACK);
  spr.setFreeFont(&DSEG7_Classic_Bold_32);
  spr.drawString (strHrs + ":" + strMins,10, 30);

  drawTime();                                                   // draw time at botton of display
  
  drawMenuItems();                                              // draw the menu items
  
  drawLines();                                                  // draw orange separator lines

  drawBatteryInfo();                                            // draw left hand data
  
  drawDateMeter(strDay, strDate, strMonth, strYear);            // draw meters section

} // drawTimeScreen()

// draw a value on the Large Display
void drawValueLargeDisplay(float value, int valuePosn, String symbol, int symbolPosn){

  spr.setTextColor(WHITE,BLACK);
  spr.setFreeFont(&DSEG7_Classic_Bold_32);
  spr.drawString(String(value),valuePosn,30);
  spr.drawString(symbol,symbolPosn,30,2);

} // drawValueLargeDisplay()

// draw weather text on Large display
void drawTextLargeDisplay(String txt, int xPosn){

  spr.setTextColor(WHITE, 0x0083);
  spr.drawString(txt, xPosn, 40, 2);                         // draw current weather in normal text
  spr.setTextColor(WHITE,BLACK);
  spr.setFreeFont(&Meteocons_Regular_28);                    // change font to weathe symbols
  spr.drawString(displayIcon, 85 , 33);                      // place weather icon on the display

} // drawTextLargeDisplay()

void drawHeader(String title, String bright, String menuTxt){

  spr.setTextDatum(0);
  spr.setTextColor(CYAN,0x0083);
  spr.drawString(title ,10,8,2);
  spr.setTextColor(WHITE,0x0083);
  spr.drawString(bright, 85, 8, 2);
  spr.drawString(menuTxt,10,124,2);

} // drawHeader()

// draw two meters in middle of display using text and values
void drawMeters(String leftText, float leftValue, String rightText, float rightValue){

  spr.setTextDatum(4);
  spr.fillRoundRect(10, 72, 55,46,4,colorDarkGrey);         // left hand box
  spr.fillRoundRect(70, 72, 55,46,4,colorDarkGrey);         // right hand box
  spr.setTextColor(WHITE,colorDarkGrey);
  spr.drawString(leftText,37,82,2);                         // draw leftText
  spr.drawString(rightText,98,82,2);                        // draw rightText
  spr.setFreeFont(&DSEG7_Classic_Bold_17);                  // change font
  spr.drawString(String(leftValue,1),37,102);               // weather degress C
  if (rightValue>99){                                       // if rightValue is greater than 99 then the value is pressure
    spr.drawString(String(rightValue,0),100,102,2);         // weather pressure pa draw smaller text
  } else {
    spr.drawString(String(rightValue,0),95,102);            // weather hunidity % draw normal text
  }

  spr.pushSprite(0,0);

} // drawMeters()

// draw the meters using data from OpenWeather (all text strings)
void drawWeatherMeters(String leftText, String leftValue, String rightText, String rightValue){

  spr.setTextDatum(4);
  spr.fillRoundRect(10, 72, 55, 46, 4,colorDarkGrey);       // left hand box
  spr.fillRoundRect(70, 72, 55, 46, 4,colorDarkGrey);       // right hand box
  spr.setTextColor(WHITE,colorDarkGrey);
  spr.drawString(leftText, 37, 82, 2);                      // draw the leftText
  spr.drawString(rightText, 98, 82, 2);                     // draw the rightText
  spr.setFreeFont(&DSEG7_Classic_Bold_17);                  // change font
  spr.drawString(leftValue, 37, 103, 2);                    // draw leftValue
  spr.drawString(rightValue, 100, 103, 2);                  // draw rightValue

  spr.pushSprite(0,0);

} // drawWeatherMeters()

// draw the date using ntp server data
void drawDateMeter(String strDay, String strDate, String strMonth, String strYear){

  spr.setTextDatum(4);
  spr.fillRoundRect(10, 72, 120, 46, 4,colorDarkGrey);          // draw wide box
  spr.setTextColor(WHITE,colorDarkGrey);
  spr.drawString(strDay + " " + strDate,spr.width()/2, 84, 2);
  spr.drawString(strMonth + " " + strYear, spr.width()/2, 105, 2);

  spr.pushSprite(0,0);

} // drawDateMeter()

// draw orange lines
void drawLines(){

  // draw orange separator lines
  spr.drawFastHLine(10, 144, 42, colOrange);                    // mid orange horizontal line
  spr.drawFastVLine(52, 144, 64, colOrange);                    // left orange vertical lines
  spr.drawFastVLine(53, 144, 64, colOrange);                    // right orange vertical line
  spr.drawFastHLine(10, 208, spr.width(), colOrange);           // bottom orange horizontal line
  
} // drawLines()

// draw screen brightness bars
void drawBars(){

  spr.fillSprite(TFT_BLACK);

  // brightness gauge background bars
  for(int i=0;i<5;i++)
  spr.fillRect(100+(i*6),10,4,12,colorDarkGrey);

  // brightness gauge bars
  for(int i=0;i<chosenBrightness+1;i++)
  spr.fillRect(100+(i*6),10,4,12,colGreen);

} // drawBars()

// draw time at bottom of screen
void drawTime(){

  spr.setFreeFont(&DSEG7_Classic_Bold_17);
  spr.drawString (strHrs + ":" + strMins, 30, 216);
  spr.setFreeFont(&DSEG7_Classic_Bold_12);
  spr.drawString (strSecs,95, 216);

} // drawTime()

// draw menu items
void drawMenuItems(){

  for(int i=0;i<4;i++)
  spr.drawString(strMenu[i],70,142+(i*15),2);              // draw strings from strMenu[]
  
  spr.fillCircle(62,150+(menuChosen*15),4,TFT_RED);        // set red dot to selected menu

} // drawMenuItems()

// draw battery info
void drawBatteryInfo(){

  spr.setTextFont(0);
  spr.setTextColor(WHITE,0x0083);
  spr.drawString("BATTERY",10,148);

  spr.setTextColor(0x4C77,BLACK);
  spr.drawString("BAT C",12,164);
  spr.drawString(String(M5BatTemp),12,174);

  spr.setTextColor(0x4C77,BLACK);
  spr.drawString("CHG mA", 12,187);
  spr.drawString(String(batchargeCurrent),12, 197);

} // drawBatteryInfo()

// main program loop
void loop() {

  ArduinoCloud.update();
  
  // update weather after owUpdateInterval minutes obtain weather data
  // instead of using delay() which blocks code execution
  unsigned long owCurrentMillis = millis();                      // get the system millis()
  if (owCurrentMillis - owPreviousMillis >= owUpdateInterval) {  // when millis() is greater than owUpdateInterval then execute code

    owPreviousMillis = owCurrentMillis;                          // save the last time weather was updated
    //wifi::connect();
    ow::getData();                                               // namespace function to get OpenWeather Data
    //wifi::disconnect();
    Serial.printf("Obtained OW data %S\n", owCurrentWeather);

  }

  // check M5 pushbuttons
  if (buttons::PBhome() == PRESSED) {
    if(hom==0) {hom=1; menuChosen++; if(menuChosen==4) menuChosen=0;  Serial.printf("Menu option: %d.%S\n", menuChosen, strMenu[menuChosen]);}
  }else hom=0;

  if (buttons::PBreset() == PRESSED) {
    if(rst==0) {rst=1; chosenBrightness++; if(chosenBrightness==5) chosenBrightness=0;  M5.Axp.ScreenBreath(brightness[chosenBrightness]);}
  }else rst=0;

  //update system parameters
  stick::getM5BatteryData();                                    // get battery details from M5
  M5.Rtc.GetTime(&TimeStruct);                                  // update the RTC
  printLocalTime();                                             // print to serial monitor and update program variables

  // update connected environment sensor
  sensTemp = sensor::getTemperature();
  sensHum = sensor::getHumidity();
  sensPress = sensor::getPressure();

  // update IOT after iotUpdateInterval minutes obtain weather data
  // this code instead of delay() which blocks execution of code
  unsigned long iotCurrentMillis = millis();                        // get current system value of millis()
  if (iotCurrentMillis - iotPreviousMillis >= iotUpdateInterval) {  // once millis() is more than iotUpdateInterval then execute code

    iotPreviousMillis = iotCurrentMillis;                           // save the last time IOT was updated

    if (ArduinoCloud.connected()){                                  // ensure we are connected to the IOT

      // update IOT variables
      sensorHUM = sensHum;
      sensorTEMP = sensTemp;
      sensorPRES = sensPress/100;
      voltageBAT = M5VBat;
      dischargeBAT = batchargeCurrent;
      chargeBAT = intCharge;
      tempBAT = M5BatTemp;

      //ArduinoCloud.update(); //this line seems to prevent connection

      Serial.printf("Updated IOT. Interval set at %d seconds.\n", iotUpdateInterval/1000);

    } else {

      Serial.printf("Arduino IOT not available.\n");

    }

  }

  // toggle through menu items and display
  switch (menuChosen){
    case 0:
      drawBatteryScreen();
      break;
    case 1:
      drawWeatherScreen();
      break;
    case 2:
      drawTemperatureScreen();
      break;
    case 3:
      drawTimeScreen();
      break;
  }
  
} // loop()